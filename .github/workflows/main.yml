name: Chained Version Propagation Build

on:
  push:
    paths:
      - 'pom.xml'  # Trigger only on pom.xml updates
    branches:
      - 'release/*'  # Trigger on release branches
      - 'master'

jobs:
  build-and-propagate:
    runs-on: ubuntu-latest
    if: "!contains(github.actor, 'github-actions[bot]')" # Avoid loops

    steps:
      # 1Ô∏è‚É£ Checkout current repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install xmlstarlet
      - name: Install xmlstarlet
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet

      # 3Ô∏è‚É£ Extract current repo version
      - name: Get current version
        id: version
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$version" >> $GITHUB_OUTPUT

      # 4Ô∏è‚É£ Build current project
      - name: Build project
        run: mvn clean install

      # 5Ô∏è‚É£ Setup Git
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 6Ô∏è‚É£ Load dependents from JSON
      - name: Load dependents
        id: deps
        run: |
          dependents=$(jq -r '.dependents[]?' dependencies.json)
          echo "dependents=$dependents" >> $GITHUB_OUTPUT

      # 7Ô∏è‚É£ Update dependent repositories sequentially
      - name: Update dependent repos
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          VERSION: ${{ steps.version.outputs.version }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          for repo in ${{ steps.deps.outputs.dependents }}
          do
            echo "üîπ Processing dependent repo: $repo"

            git clone https://x-access-token:${GH_TOKEN}@github.com/chetanpatil018/$repo.git
            cd $repo || { echo "‚ùå Failed to enter repo $repo"; exit 1; }

            # Check or create release branch
            if git ls-remote --heads origin $BRANCH_NAME | grep $BRANCH_NAME; then
              git checkout $BRANCH_NAME
              git pull
            else
              git checkout -b $BRANCH_NAME
            fi

            echo "üîπ Updating parent and dependencies in $repo"

            if [[ ! -f pom.xml ]]; then
              echo "‚ùå pom.xml not found in $repo"
              cd ..
              rm -rf $repo
              continue
            fi

            # Update parent version
            echo "Updating parent version to $VERSION"
            xmlstarlet ed -L -u "/_:project/_:parent/_:version" -v "$VERSION" pom.xml || echo "‚ö†Ô∏è Failed to update parent version in $repo"

            # Update declared dependencies (from dependencies.json)
            deps_to_update=$(jq -r '.dependencies[]?' dependencies.json)
            for dep in $deps_to_update
            do
              if [[ "$dep" == *"."* ]]; then
                echo "Updating property $dep to $VERSION"
                xmlstarlet ed -L -u "/_:project/_:properties/_:$dep" -v "$VERSION" pom.xml || echo "‚ö†Ô∏è Failed to update property $dep in $repo"
              else
                echo "Updating dependency $dep to $VERSION"
                xmlstarlet ed -L -u "//_:dependency[_:artifactId='$dep']/_:version" -v "$VERSION" pom.xml || echo "‚ö†Ô∏è Failed to update dependency $dep in $repo"
              fi
            done

            # Extract current version
            current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>&1) || { echo "‚ùå Maven failed in $repo: $current_version"; exit 1; }

            # Compute next patch version
            base_version=$(echo "$current_version" | sed 's/-SNAPSHOT//')
            major=$(echo "$base_version" | cut -d. -f1)
            minor=$(echo "$base_version" | cut -d. -f2)
            patch=$(echo "$base_version" | cut -d. -f3)
            next_patch=$((patch + 1))
            next_version="${major}.${minor}.${next_patch}"

            # Keep SNAPSHOT suffix for non-master branches
            if [[ "$BRANCH_NAME" != "master" ]]; then
              next_version="${next_version}-SNAPSHOT"
            fi

            echo "üîπ Bumping version from $current_version ‚Üí $next_version"
            mvn versions:set -DnewVersion=$next_version -DgenerateBackupPoms=false 2>&1 || echo "‚ö†Ô∏è Maven versions:set failed in $repo"

            # Commit and push only if there are changes
            git add pom.xml
            if git diff --cached --quiet; then
              echo "No changes to commit in $repo"
            else
              git commit -m "Bump version to $next_version and update dependencies to $VERSION [skip ci]" || echo "‚ö†Ô∏è Git commit failed in $repo"
              git push origin $BRANCH_NAME || echo "‚ö†Ô∏è Git push failed in $repo"
            fi

            cd ..
            rm -rf $repo
          done
