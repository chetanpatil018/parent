name: Chained Version Propagation Build

on:
  push:
    paths:
      - 'pom.xml'
    branches:
      - 'release/*'
      - 'master'
  workflow_dispatch:

jobs:
  build-and-propagate:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout current repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install xmlstarlet & jq
      - name: Install xmlstarlet & jq
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet jq

      # 3Ô∏è‚É£ Extract version dynamically (universal fix)
      - name: Get current version
        id: version
        run: |
          echo "üîπ Extracting project version from pom.xml"

          # Prefer xmlstarlet (safe and exact)
          if command -v xmlstarlet >/dev/null 2>&1; then
            version=$(xmlstarlet sel -t -v "/_:project/_:version" pom.xml 2>/dev/null || echo "")
          fi

          # Fallback to Maven if XML fails
          if [[ -z "$version" ]]; then
            echo "‚ö†Ô∏è xmlstarlet failed, trying Maven help:evaluate"
            version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo "")
          fi

          # Validation
          if [[ -z "$version" ]]; then
            echo "‚ùå Failed to extract version from pom.xml"
            exit 1
          fi

          echo "‚úÖ Detected version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      # 4Ô∏è‚É£ Build current project
      - name: Build project
        run: mvn clean install

      # 5Ô∏è‚É£ Setup Git
      - name: Setup Git
        run: |
          git config --global user.name "ci-user"
          git config --global user.email "ci-user@example.com"

      # 6Ô∏è‚É£ Load dependents from JSON
      - name: Load dependents from JSON
        id: deps
        run: |
          dependents=$(jq -r '.dependents[]?' dependencies.json | xargs)
          echo "dependents=$dependents" >> $GITHUB_OUTPUT

      # 7Ô∏è‚É£ Update dependent repositories sequentially
      - name: Update dependent repos
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          VERSION: ${{ steps.version.outputs.version }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          for repo in ${{ steps.deps.outputs.dependents }}
          do
            echo "üîπ Processing dependent repo: $repo"

            git clone https://x-access-token:${GH_TOKEN}@github.com/chetanpatil018/$repo.git
            cd $repo || { echo "‚ùå Failed to enter repo $repo"; exit 1; }

            # Ensure branch exists
            if git ls-remote --heads origin $BRANCH_NAME | grep $BRANCH_NAME; then
              git checkout $BRANCH_NAME
              git pull
            else
              git checkout -b $BRANCH_NAME
              git push origin $BRANCH_NAME
            fi

            if [[ ! -f pom.xml ]]; then
              echo "‚ùå pom.xml not found in $repo"
              cd ..
              rm -rf $repo
              continue
            fi

            echo "Updating parent version to $VERSION"
            xmlstarlet ed -L -u "/_:project/_:parent/_:version" -v "$VERSION" pom.xml || echo "‚ö†Ô∏è Failed to update parent version"

            # üîπ Read dependencies from JSON with their sources
            deps_to_update=$(jq -c '.dependencies[]?' ../dependencies.json)

            for dep_entry in $deps_to_update; do
              dep_name=$(echo "$dep_entry" | jq -r '.name')
              dep_source=$(echo "$dep_entry" | jq -r '.source')

              # Skip invalid entries
              if [[ -z "$dep_name" || -z "$dep_source" ]]; then
                echo "‚ö†Ô∏è Skipping invalid dependency entry: $dep_entry"
                continue
              fi

              # Extract the version from the source repo‚Äôs pom.xml
              echo "Fetching version from source repo: $dep_source"
              src_version=$(curl -s "https://raw.githubusercontent.com/chetanpatil018/$dep_source/$BRANCH_NAME/pom.xml" | xmlstarlet sel -t -v "/_:project/_:version" 2>/dev/null || echo "")

              if [[ -z "$src_version" ]]; then
                echo "‚ö†Ô∏è Could not fetch version from $dep_source ‚Äî skipping update for $dep_name"
                continue
              fi

              echo "‚úÖ Found $dep_source version: $src_version"

              # If it's a property (commons.version), update under <properties>
              if [[ "$dep_name" == *"."* ]]; then
                xmlstarlet ed -L -u "/_:project/_:properties/_:$dep_name" -v "$src_version" pom.xml || echo "‚ö†Ô∏è Failed to update property $dep_name"
              else
                # Otherwise update direct dependency version
                xmlstarlet ed -L -u "//_:dependency[_:artifactId='$dep_name']/_:version" -v "$src_version" pom.xml || echo "‚ö†Ô∏è Failed to update dependency $dep_name"
              fi
            done

            # Extract current version safely
            current_version=$(xmlstarlet sel -t -v "/_:project/_:version" pom.xml 2>/dev/null || echo "")
            if [[ -z "$current_version" ]]; then
              current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo "")
            fi

            if [[ -z "$current_version" ]]; then
              echo "‚ùå Could not determine current version for $repo"
              cd ..
              rm -rf $repo
              continue
            fi

            echo "Current version in $repo: $current_version"

            # Compute next patch version
            base_version=$(echo "$current_version" | sed 's/-SNAPSHOT//')
            major=$(echo "$base_version" | cut -d. -f1)
            minor=$(echo "$base_version" | cut -d. -f2)
            patch=$(echo "$base_version" | cut -d. -f3)
            next_patch=$((patch + 1))
            next_version="${major}.${minor}.${next_patch}"

            # Keep SNAPSHOT for non-master branches
            if [[ "$BRANCH_NAME" != "master" ]]; then
              next_version="${next_version}-SNAPSHOT"
            fi

            mvn versions:set -DnewVersion=$next_version -DgenerateBackupPoms=false

            # Commit & push
            git add pom.xml
            if git diff --cached --quiet; then
              echo "No changes to commit in $repo"
            else
              git commit -m "Bump version to $next_version and update dependencies using their source repos [skip ci]"
              git push origin $BRANCH_NAME
            fi

            cd ..

            # Trigger next workflow
            echo "Triggering workflow_dispatch for $repo"
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GH_TOKEN" \
              https://api.github.com/repos/chetanpatil018/$repo/actions/workflows/main.yml/dispatches \
              -d "{\"ref\":\"$BRANCH_NAME\"}"

            rm -rf $repo
          done
