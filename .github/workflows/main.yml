name: Chained Version Propagation Build

on:
  push:
    paths:
      - 'pom.xml'  # Trigger only on pom.xml updates
    branches:
      - 'release/*'  # Trigger on release branches
      - 'master'

jobs:
  build-and-propagate:
    runs-on: ubuntu-latest
    if: "!contains(github.actor, 'github-actions[bot]')" # Avoid loops

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Extract current repo version
      - name: Get current version
        id: version
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$version" >> $GITHUB_OUTPUT

      # 3. Build current project
      - name: Build project
        run: mvn clean install

      # 4. Setup Git
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 5. Load dependents from JSON
      - name: Load dependents
        id: deps
        run: |
          dependents=$(jq -r '.dependents[]?' dependencies.json)
          echo "dependents=$dependents" >> $GITHUB_OUTPUT

      # 6. Update dependents sequentially
      - name: Update dependent repos
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          VERSION: ${{ steps.version.outputs.version }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          for repo in ${{ steps.deps.outputs.dependents }}
          do
            echo "üîπ Processing dependent repo: $repo"

            git clone https://x-access-token:${GH_TOKEN}@github.com/chetanpatil018/$repo.git
            cd $repo

            # Check or create release branch
            if git ls-remote --heads origin $BRANCH_NAME | grep $BRANCH_NAME; then
              git checkout $BRANCH_NAME
              git pull
            else
              git checkout -b $BRANCH_NAME
            fi

            echo "üîπ Updating parent and dependencies in $repo"

            # 1Ô∏è‚É£ Update parent version
            xmlstarlet ed -L -u "/_:project/_:parent/_:version" -v "$VERSION" pom.xml || true

            # 2Ô∏è‚É£ Update declared dependencies (from dependencies.json)
            deps_to_update=$(jq -r '.dependencies[]?' dependencies.json)
            for dep in $deps_to_update
            do
              echo "Updating dependency $dep to $VERSION"
              xmlstarlet ed -L -u "//_:dependency[_:artifactId='$dep']/_:version" -v "$VERSION" pom.xml || true
            done

            # 3Ô∏è‚É£ Extract current version
            current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

            # 4Ô∏è‚É£ Compute next patch version (handles snapshot and release)
            base_version=$(echo "$current_version" | sed 's/-SNAPSHOT//')
            major=$(echo "$base_version" | cut -d. -f1)
            minor=$(echo "$base_version" | cut -d. -f2)
            patch=$(echo "$base_version" | cut -d. -f3)
            next_patch=$((patch + 1))
            next_version="${major}.${minor}.${next_patch}"

            # Keep SNAPSHOT suffix for non-master branches
            if [[ "$BRANCH_NAME" != "master" ]]; then
              next_version="${next_version}-SNAPSHOT"
            fi

            echo "üîπ Bumping version from $current_version ‚Üí $next_version"
            mvn versions:set -DnewVersion=$next_version -DgenerateBackupPoms=false

            # Commit and push
            git add pom.xml
            git commit -m "Bump version to $next_version and update dependencies to $VERSION [skip ci]"
            git push origin $BRANCH_NAME

            cd ..
            rm -rf $repo
          done
