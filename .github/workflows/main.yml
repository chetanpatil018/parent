name: Chained Version Propagation Build

on:
  push:
    paths:
      - 'pom.xml'
    branches:
      - 'release/*'
      - 'master'
  workflow_dispatch:

jobs:
  build-and-propagate:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install necessary tools: xmlstarlet for XML manipulation, jq for JSON parsing
      - name: Install xmlstarlet & jq
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet jq

      # 3Ô∏è‚É£ Extract current project version from pom.xml
      - name: Get current version
        id: version
        run: |
          echo "üîπ Extracting project version from pom.xml"

          if command -v xmlstarlet >/dev/null 2>&1; then
            version=$(xmlstarlet sel -t -v "/_:project/_:version" pom.xml 2>/dev/null || echo "")
          fi

          if [[ -z "$version" ]]; then
            echo "‚ö†Ô∏è xmlstarlet failed, trying Maven help:evaluate"
            version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo "")
          fi

          if [[ -z "$version" ]]; then
            echo "‚ùå Failed to extract version from pom.xml"
            exit 1
          fi

          echo "‚úÖ Detected version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      # 4Ô∏è‚É£ Build the current project to ensure correctness
      - name: Build project
        run: mvn clean install

      # 5Ô∏è‚É£ Setup Git configuration for commits in dependent repos
      - name: Setup Git
        run: |
          git config --global user.name "ci-user"
          git config --global user.email "ci-user@example.com"

      # 6Ô∏è‚É£ Load dependents list from dependencies.json
      - name: Load dependents from JSON
        id: deps
        run: |
          dependents=$(jq -r '.dependents[]?' dependencies.json | xargs)
          echo "dependents=$dependents" >> $GITHUB_OUTPUT

      # 7Ô∏è‚É£ Loop through each dependent repo and update versions
      - name: Update dependent repos
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          VERSION: ${{ steps.version.outputs.version }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail

          for repo in ${{ steps.deps.outputs.dependents }}
          do
            echo "üîπ Processing dependent repo: $repo"

            git clone https://x-access-token:${GH_TOKEN}@github.com/chetanpatil018/$repo.git
            cd $repo || { echo "‚ùå Failed to enter repo $repo"; exit 1; }

            if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
              git checkout "$BRANCH_NAME"
              git pull --ff-only
            else
              git checkout -b "$BRANCH_NAME"
              git push origin "$BRANCH_NAME"
            fi

            if [[ ! -f pom.xml ]]; then
              echo "‚ùå pom.xml not found in $repo"
              cd ..
              rm -rf $repo
              continue
            fi

            echo "üîß Updating parent version in $repo to $VERSION"
            xmlstarlet ed -L -u "/_:project/_:parent/_:version" -v "$VERSION" pom.xml || echo "‚ö†Ô∏è Failed to update parent version"

            # üîΩ Update dependencies according to dependencies.json with type
            if [[ -f dependencies.json ]]; then
              echo "üîç Updating dependencies from dependencies.json using GitHub API"

              REPO_NAME="${GITHUB_REPOSITORY##*/}"

              for dep in $(jq -c '.dependencies[]' dependencies.json); do
                name=$(echo "$dep" | jq -r '.name')
                source=$(echo "$dep" | jq -r '.source')
                type=$(echo "$dep" | jq -r '.type')

                echo "‚§¥Ô∏è Processing dependency entry: name='${name}' source='${source}' type='${type}'"

                dep_version=""

                if [[ "$source" == "$REPO_NAME" ]]; then
                  dep_version="$VERSION"
                  echo "   ‚Ü™ Source '$source' is current repo ‚Üí using local version: $dep_version"
                else
                  found_version=false
                  for branch in "$BRANCH_NAME" master main; do
                    echo "   ‚Ü™ Trying branch '$branch' of $source"

                    curl -s -H "Authorization: token $GH_TOKEN" \
                      -H "Accept: application/vnd.github.v3.raw" \
                      -o /tmp/_pom.xml \
                      "https://api.github.com/repos/${GITHUB_ACTOR}/$source/contents/pom.xml?ref=$branch"

                    if [[ -s /tmp/_pom.xml ]]; then
                      dep_version=$(xmlstarlet sel -t -v "/_:project/_:version" /tmp/_pom.xml)
                      echo "     ‚úÖ Found version='$dep_version' for $name from $source ($branch)"
                      found_version=true
                      break
                    fi
                  done

                  if [[ "$found_version" = false ]]; then
                    echo "     ‚ö†Ô∏è Could not fetch version for $name from $source ‚Äî skipping"
                    continue
                  fi
                fi

                if [[ "$type" == "parent" ]]; then
                  echo "   ‚Ü™ Updating parent version to $dep_version"
                  mvn versions:update-parent -DparentVersion="[${dep_version}]" -B
                elif [[ "$type" == "property" ]]; then
                  echo "   ‚Ü™ Updating property <$name> to $dep_version"
                  mvn versions:set-property -Dproperty="${name}" -DnewVersion="${dep_version}" -B
                else
                  echo "   ‚ö†Ô∏è Unknown type '$type' for $name ‚Äî skipping"
                fi
              done
            else
              echo "‚ö†Ô∏è No dependencies.json found in $repo ‚Äî skipping dependency updates"
            fi

            current_version=$(xmlstarlet sel -t -v "/_:project/_:version" pom.xml 2>/dev/null || echo "")
            if [[ -z "$current_version" ]]; then
              current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo "")
            fi

            if [[ -z "$current_version" ]]; then
              echo "‚ùå Could not determine current version for $repo"
              cd ..
              rm -rf $repo
              continue
            fi

            echo "Current version in $repo: $current_version"

            base_version=$(echo "$current_version" | sed 's/-SNAPSHOT//')
            major=$(echo "$base_version" | cut -d. -f1)
            minor=$(echo "$base_version" | cut -d. -f2)
            patch=$(echo "$base_version" | cut -d. -f3)
            next_patch=$((patch + 1))
            next_version="${major}.${minor}.${next_patch}"

            if [[ "$BRANCH_NAME" != "master" ]]; then
              next_version="${next_version}-SNAPSHOT"
            fi

            echo "üîß Bumping $repo to $next_version"
            mvn versions:set -DnewVersion=$next_version -DgenerateBackupPoms=false

            git add pom.xml
            if git diff --cached --quiet; then
              echo "No changes to commit in $repo"
            else
              git commit -m "Bump version to $next_version and update dependencies using their source repos [skip ci]"
              git push origin "$BRANCH_NAME"
            fi

            cd ..

            echo "Triggering workflow_dispatch for $repo"
            curl -s -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GH_TOKEN" \
              https://api.github.com/repos/chetanpatil018/$repo/actions/workflows/main.yml/dispatches \
              -d "{\"ref\":\"$BRANCH_NAME\"}" \
              || echo "‚ö†Ô∏è workflow_dispatch failed for $repo"

            rm -rf $repo
          done
