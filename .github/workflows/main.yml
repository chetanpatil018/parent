name: Chained Version Propagation Build

on:
  push:
    paths:
      - 'pom.xml'
    branches:
      - 'release/*'
      - 'master'
  workflow_dispatch:      

jobs:
  build-and-propagate:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout current repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Install dependencies
      - name: Install xmlstarlet & jq
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet jq

      # 3️⃣ Extract current repo version
      - name: Get current version
        id: version
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$version" >> $GITHUB_OUTPUT

      # 4️⃣ Build current project
      - name: Build project
        run: mvn clean install

      # 5️⃣ Setup Git
      - name: Setup Git
        run: |
          git config --global user.name "ci-user"
          git config --global user.email "ci-user@example.com"

      # 6️⃣ Load dependents from JSON
      - name: Load dependents
        id: deps
        run: |
          dependents=$(jq -r '.dependents[]?' dependencies.json)
          echo "dependents=$dependents" >> $GITHUB_OUTPUT

      # 7️⃣ Update dependent repositories sequentially
      - name: Update dependent repos
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          VERSION: ${{ steps.version.outputs.version }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          for repo in ${{ steps.deps.outputs.dependents }}
          do
            echo "🔹 Processing dependent repo: $repo"

            git clone https://x-access-token:${GH_TOKEN}@github.com/chetanpatil018/$repo.git
            cd $repo || { echo "❌ Failed to enter repo $repo"; exit 1; }

            # Ensure the branch exists in child repo
            if git ls-remote --heads origin $BRANCH_NAME | grep $BRANCH_NAME; then
              git checkout $BRANCH_NAME
              git pull
            else
              git checkout -b $BRANCH_NAME
              git push origin $BRANCH_NAME
            fi

            if [[ ! -f pom.xml ]]; then
              echo "❌ pom.xml not found in $repo"
              cd ..
              rm -rf $repo
              continue
            fi

            # Update parent version
            echo "Updating parent version to $VERSION"
            xmlstarlet ed -L -u "/_:project/_:parent/_:version" -v "$VERSION" pom.xml || echo "⚠️ Failed to update parent version"

            # Update declared dependencies (from dependencies.json)
            deps_to_update=$(jq -r '.dependencies[]?' dependencies.json)
            for dep in $deps_to_update
            do
              if [[ "$dep" == *"."* ]]; then
                xmlstarlet ed -L -u "/_:project/_:properties/_:$dep" -v "$VERSION" pom.xml || echo "⚠️ Failed to update property $dep"
              else
                xmlstarlet ed -L -u "//_:dependency[_:artifactId='$dep']/_:version" -v "$VERSION" pom.xml || echo "⚠️ Failed to update dependency $dep"
              fi
            done

            # Extract current version
            current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>&1)

            # Compute next patch version
            base_version=$(echo "$current_version" | sed 's/-SNAPSHOT//')
            major=$(echo "$base_version" | cut -d. -f1)
            minor=$(echo "$base_version" | cut -d. -f2)
            patch=$(echo "$base_version" | cut -d. -f3)
            next_patch=$((patch + 1))
            next_version="${major}.${minor}.${next_patch}"

            # Keep SNAPSHOT suffix for non-master branches
            if [[ "$BRANCH_NAME" != "master" ]]; then
              next_version="${next_version}-SNAPSHOT"
            fi

            # Update version in repo
            mvn versions:set -DnewVersion=$next_version -DgenerateBackupPoms=false

            # Commit and push changes with [skip ci] to avoid loops
            git add pom.xml
            if git diff --cached --quiet; then
              echo "No changes to commit in $repo"
            else
              git commit -m "Bump version to $next_version and update dependencies to $VERSION [skip ci]"
              git push origin $BRANCH_NAME
            fi

            cd ..

            # Trigger child workflow via workflow_dispatch
            echo "Triggering workflow_dispatch for $repo"
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GH_TOKEN" \
              https://api.github.com/repos/chetanpatil018/$repo/actions/workflows/main.yml/dispatches \
              -d "{\"ref\":\"$BRANCH_NAME\"}"

            rm -rf $repo
          done
